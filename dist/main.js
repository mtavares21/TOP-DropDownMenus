(()=>{"use strict";var n,e,t,r={83:(n,e,t)=>{t.d(e,{Z:()=>a});var r=t(445),A=t.n(r),o=t(352),i=t.n(o)()(A());i.push([n.id,"body{\ndisplay: flex;\nflex-wrap: wrap;\nwidth: 100%;\nheight:100px;\njustify-self: center;\njustify-content: center;\nbackground-color:white;\n}\nh1{\ndisplay: flex;\nmargin: 0px;\nmargin-left: 30%;\nmargin-right: 30%;\nfont-family: 'Lato', sans-serif;\nfont-weight: 500;\n\n}\n.dropTrigger{\nlist-style: none;\nappearance: none;\nbackground-color:none;\nfont-family: 'Lato', sans-serif;\nfont-size: 16px;\nwidth: fit-content;\nmargin-left: 12px;\nmargin-right: 12px;\nheight: fit-content;\ntext-align: center;\nvertical-align: center;\npadding-top: 3px;\npadding-bottom: 3px;\npadding-left: 0px;\ncolor:rgb(54, 57, 59);\nborder-width: 1px;\nborder-color: rgb(200, 200, 200);\n}\nnav {\ndisplay: flex;\nbackground-color: none; \nalign-content: center;\nposition: relative;\nmargin-right: 50%;\nmargin-left: 50%;\n}\n.dropNav{\nappearance: none;\nmargin-block-start: 0px;\nmargin-block-end: 0px;\nposition: relative;\ndisplay: flex;\nflex-wrap: nowrap;\nflex-direction:row;\njustify-content: space-around;\nalign-content: center;\nalign-self: center;\nalign-items: flex-start;\nwidth: fit-content;\nheight: 24px;\npadding-inline-start: 0px;\nlist-style: none;\nborder-style: solid;\nborder-width: 1px;\nborder-color: rgb(190, 189, 186);\nborder-radius: 5px;\nbox-shadow:0 1px 2px 0 rgba(34,36,38,.15);\n}\n.dropContain{\ndisplay: flex;\nflex-direction: column;\nwidth: 100px;\nalign-items: center;\n}\n.dropList{\ndisplay: flex;\nflex-wrap: nowrap;\nflex-direction: column;\nposition: relative;\nmargin: 0px;\nheight: 0px;\npadding: 0px;\nwidth: 103px;\ntext-align: center;\nappearance: none;\nlist-style: none;\nbackground-color: rgb(220, 230, 230);\nfont-size: 12px;\nfont-family: 'Lato', sans-serif;\ncolor: rgb(60, 60, 60);\nborder-bottom-right-radius: 5px;\nborder-bottom-left-radius: 5px;\noverflow: hidden;\n-webkit-transition:height 200ms ease-in;\n-moz-transition:height 200ms ease-in;\n-o-transition:height 200ms ease-in;\ntransition:height 200ms ease-in;\n\n}\n.dropList:hover{\ndisplay: flex;\npadding-top: 5px;\npadding-bottom: 5px;\nheight: 60px;\n\n}\n.dropTrigger:hover{\nopacity: 0.5;\ncolor:rgb(4, 7, 9);\n}\n.dropTrigger:hover ~ .dropList{\ndisplay: flex;\npadding-top: 5px;\npadding-bottom: 5px;\nheight: 60px;\n}\n.dropList li{\ndisplay: flex;\njustify-self: center;\nalign-self: center;\ntext-align: center;\njustify-content: start;\npadding-left: 5px;\npadding-bottom: 1px;\ntext-align: center;\nwidth: 100%;\n}\n.dropList li:hover{\nopacity: 1;\nbackground-color: rgb(200, 200, 200);\ntext-decoration: underline;\nalign-self: center;\n}","",{version:3,sources:["webpack://./src/menu.css"],names:[],mappings:"AAAA;AACA,aAAa;AACb,eAAe;AACf,WAAW;AACX,YAAY;AACZ,oBAAoB;AACpB,uBAAuB;AACvB,sBAAsB;AACtB;AACA;AACA,aAAa;AACb,WAAW;AACX,gBAAgB;AAChB,iBAAiB;AACjB,+BAA+B;AAC/B,gBAAgB;;AAEhB;AACA;AACA,gBAAgB;AAChB,gBAAgB;AAChB,qBAAqB;AACrB,+BAA+B;AAC/B,eAAe;AACf,kBAAkB;AAClB,iBAAiB;AACjB,kBAAkB;AAClB,mBAAmB;AACnB,kBAAkB;AAClB,sBAAsB;AACtB,gBAAgB;AAChB,mBAAmB;AACnB,iBAAiB;AACjB,qBAAqB;AACrB,iBAAiB;AACjB,gCAAgC;AAChC;AACA;AACA,aAAa;AACb,sBAAsB;AACtB,qBAAqB;AACrB,kBAAkB;AAClB,iBAAiB;AACjB,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB,uBAAuB;AACvB,qBAAqB;AACrB,kBAAkB;AAClB,aAAa;AACb,iBAAiB;AACjB,kBAAkB;AAClB,6BAA6B;AAC7B,qBAAqB;AACrB,kBAAkB;AAClB,uBAAuB;AACvB,kBAAkB;AAClB,YAAY;AACZ,yBAAyB;AACzB,gBAAgB;AAChB,mBAAmB;AACnB,iBAAiB;AACjB,gCAAgC;AAChC,kBAAkB;AAClB,yCAAyC;AACzC;AACA;AACA,aAAa;AACb,sBAAsB;AACtB,YAAY;AACZ,mBAAmB;AACnB;AACA;AACA,aAAa;AACb,iBAAiB;AACjB,sBAAsB;AACtB,kBAAkB;AAClB,WAAW;AACX,WAAW;AACX,YAAY;AACZ,YAAY;AACZ,kBAAkB;AAClB,gBAAgB;AAChB,gBAAgB;AAChB,oCAAoC;AACpC,eAAe;AACf,+BAA+B;AAC/B,sBAAsB;AACtB,+BAA+B;AAC/B,8BAA8B;AAC9B,gBAAgB;AAChB,uCAAuC;AACvC,oCAAoC;AACpC,kCAAkC;AAClC,+BAA+B;;AAE/B;AACA;AACA,aAAa;AACb,gBAAgB;AAChB,mBAAmB;AACnB,YAAY;;AAEZ;AACA;AACA,YAAY;AACZ,kBAAkB;AAClB;AACA;AACA,aAAa;AACb,gBAAgB;AAChB,mBAAmB;AACnB,YAAY;AACZ;AACA;AACA,aAAa;AACb,oBAAoB;AACpB,kBAAkB;AAClB,kBAAkB;AAClB,sBAAsB;AACtB,iBAAiB;AACjB,mBAAmB;AACnB,kBAAkB;AAClB,WAAW;AACX;AACA;AACA,UAAU;AACV,oCAAoC;AACpC,0BAA0B;AAC1B,kBAAkB;AAClB",sourcesContent:["body{\ndisplay: flex;\nflex-wrap: wrap;\nwidth: 100%;\nheight:100px;\njustify-self: center;\njustify-content: center;\nbackground-color:white;\n}\nh1{\ndisplay: flex;\nmargin: 0px;\nmargin-left: 30%;\nmargin-right: 30%;\nfont-family: 'Lato', sans-serif;\nfont-weight: 500;\n\n}\n.dropTrigger{\nlist-style: none;\nappearance: none;\nbackground-color:none;\nfont-family: 'Lato', sans-serif;\nfont-size: 16px;\nwidth: fit-content;\nmargin-left: 12px;\nmargin-right: 12px;\nheight: fit-content;\ntext-align: center;\nvertical-align: center;\npadding-top: 3px;\npadding-bottom: 3px;\npadding-left: 0px;\ncolor:rgb(54, 57, 59);\nborder-width: 1px;\nborder-color: rgb(200, 200, 200);\n}\nnav {\ndisplay: flex;\nbackground-color: none; \nalign-content: center;\nposition: relative;\nmargin-right: 50%;\nmargin-left: 50%;\n}\n.dropNav{\nappearance: none;\nmargin-block-start: 0px;\nmargin-block-end: 0px;\nposition: relative;\ndisplay: flex;\nflex-wrap: nowrap;\nflex-direction:row;\njustify-content: space-around;\nalign-content: center;\nalign-self: center;\nalign-items: flex-start;\nwidth: fit-content;\nheight: 24px;\npadding-inline-start: 0px;\nlist-style: none;\nborder-style: solid;\nborder-width: 1px;\nborder-color: rgb(190, 189, 186);\nborder-radius: 5px;\nbox-shadow:0 1px 2px 0 rgba(34,36,38,.15);\n}\n.dropContain{\ndisplay: flex;\nflex-direction: column;\nwidth: 100px;\nalign-items: center;\n}\n.dropList{\ndisplay: flex;\nflex-wrap: nowrap;\nflex-direction: column;\nposition: relative;\nmargin: 0px;\nheight: 0px;\npadding: 0px;\nwidth: 103px;\ntext-align: center;\nappearance: none;\nlist-style: none;\nbackground-color: rgb(220, 230, 230);\nfont-size: 12px;\nfont-family: 'Lato', sans-serif;\ncolor: rgb(60, 60, 60);\nborder-bottom-right-radius: 5px;\nborder-bottom-left-radius: 5px;\noverflow: hidden;\n-webkit-transition:height 200ms ease-in;\n-moz-transition:height 200ms ease-in;\n-o-transition:height 200ms ease-in;\ntransition:height 200ms ease-in;\n\n}\n.dropList:hover{\ndisplay: flex;\npadding-top: 5px;\npadding-bottom: 5px;\nheight: 60px;\n\n}\n.dropTrigger:hover{\nopacity: 0.5;\ncolor:rgb(4, 7, 9);\n}\n.dropTrigger:hover ~ .dropList{\ndisplay: flex;\npadding-top: 5px;\npadding-bottom: 5px;\nheight: 60px;\n}\n.dropList li{\ndisplay: flex;\njustify-self: center;\nalign-self: center;\ntext-align: center;\njustify-content: start;\npadding-left: 5px;\npadding-bottom: 1px;\ntext-align: center;\nwidth: 100%;\n}\n.dropList li:hover{\nopacity: 1;\nbackground-color: rgb(200, 200, 200);\ntext-decoration: underline;\nalign-self: center;\n}"],sourceRoot:""}]);const a=i},352:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var A={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(A[i]=!0)}for(var a=0;a<n.length;a++){var s=[].concat(n[a]);r&&A[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),e.push(s))}},e}},445:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,A=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var t=[],r=!0,A=!1,o=void 0;try{for(var i,a=n[Symbol.iterator]();!(r=(i=a.next()).done)&&(t.push(i.value),!e||t.length!==e);r=!0);}catch(n){A=!0,o=n}finally{try{r||null==a.return||a.return()}finally{if(A)throw o}}return t}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=A[1],i=A[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),l="/*# ".concat(s," */"),d=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[o].concat(d).concat([l]).join("\n")}return[o].join("\n")}},701:(n,e,t)=>{var r,A=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),o=[];function i(n){for(var e=-1,t=0;t<o.length;t++)if(o[t].identifier===n){e=t;break}return e}function a(n,e){for(var t={},r=[],A=0;A<n.length;A++){var a=n[A],s=e.base?a[0]+e.base:a[0],l=t[s]||0,d="".concat(s," ").concat(l);t[s]=l+1;var c=i(d),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==c?(o[c].references++,o[c].updater(p)):o.push({identifier:d,updater:f(p,e),references:1}),r.push(d)}return r}function s(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var o=t.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var i=A(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}return e}var l,d=(l=[],function(n,e){return l[n]=e,l.filter(Boolean).join("\n")});function c(n,e,t,r){var A=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=d(e,A);else{var o=document.createTextNode(A),i=n.childNodes;i[e]&&n.removeChild(i[e]),i.length?n.insertBefore(o,i[e]):n.appendChild(o)}}function p(n,e,t){var r=t.css,A=t.media,o=t.sourceMap;if(A?n.setAttribute("media",A):n.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var B=null,g=0;function f(n,e){var t,r,A;if(e.singleton){var o=g++;t=B||(B=s(e)),r=c.bind(null,t,o,!1),A=c.bind(null,t,o,!0)}else t=s(e),r=p.bind(null,t,e),A=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else A()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=a(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var A=i(t[r]);o[A].references--}for(var s=a(n,e),l=0;l<t.length;l++){var d=i(t[l]);0===o[d].references&&(o[d].updater(),o.splice(d,1))}t=s}}}}},A={};function o(n){var e=A[n];if(void 0!==e)return e.exports;var t=A[n]={id:n,exports:{}};return r[n](t,t.exports,o),t.exports}o.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return o.d(e,{a:e}),e},o.d=(n,e)=>{for(var t in e)o.o(e,t)&&!o.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},o.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),n=o(701),e=o.n(n),t=o(83),e()(t.Z,{insert:"head",singleton:!1}),t.Z.locals,(()=>{const n=Array.from(document.querySelectorAll(".dropTrigger")),e=n.length-1,t=n[0],r=n[e],A=Array.from(document.querySelectorAll(".dropList")),o=A[0],i=A[e],a=document.querySelector(".dropNav");t.addEventListener("mouseenter",(()=>a.style.borderBottomLeftRadius="0px")),t.addEventListener("mouseleave",(()=>a.style.borderBottomLeftRadius="5px")),o.addEventListener("mouseenter",(()=>a.style.borderBottomLeftRadius="0px")),o.addEventListener("mouseleave",(()=>a.style.borderBottomLeftRadius="5px")),r.addEventListener("mouseenter",(()=>a.style.borderBottomRightRadius="0px")),r.addEventListener("mouseleave",(()=>a.style.borderBottomRightRadius="5px")),i.addEventListener("mouseenter",(()=>a.style.borderBottomRightRadius="0px")),i.addEventListener("mouseleave",(()=>a.style.borderBottomRightRadius="5px"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,